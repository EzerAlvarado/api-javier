# Generated by Django 5.1.2 on 2024-11-02 02:06

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Usuario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "clave",
                    models.IntegerField(
                        blank=True,
                        help_text="Clave de acceso única",
                        null=True,
                        unique=True,
                    ),
                ),
                (
                    "es_admin",
                    models.BooleanField(
                        default=False,
                        help_text="Indica si el usuario tiene privilegios de administrador",
                    ),
                ),
                (
                    "nombre",
                    models.CharField(
                        blank=True,
                        help_text="Nombre completo del usuario",
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuario",
                "verbose_name_plural": "Usuarios",
                "db_table": "usuarios",
                "ordering": ["pk"],
                "permissions": [
                    ["autorizar_usuario", "Puede autorizar Usuarios"],
                    ["viewcrud_usuario", "Puede visualizar Usuarios en el menú"],
                ],
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="RegistroHorario",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "clave_empleado",
                    models.IntegerField(
                        blank=True,
                        help_text="Clave del empleado que registra su horas",
                        null=True,
                    ),
                ),
                ("hora_entrada", models.DateTimeField(blank=True, null=True)),
                ("hora_salida", models.DateTimeField(blank=True, null=True)),
                (
                    "llego_tarde",
                    models.BooleanField(
                        default=False,
                        help_text="Si llego 15 min tarde se va a recorrer 1 hora su registro",
                    ),
                ),
                (
                    "se_cancela_su_dia",
                    models.BooleanField(
                        default=False,
                        help_text="llego 2 horas tarde se va va a cancelar el dia",
                    ),
                ),
                (
                    "estado_registro",
                    models.CharField(
                        choices=[
                            ("A", "Aprobada"),
                            ("C", "Cancelada"),
                            ("T", "En Transcurso"),
                        ],
                        max_length=1,
                    ),
                ),
                (
                    "usuario_que_registra",
                    models.ForeignKey(
                        blank=True,
                        help_text="Relacion al empleaod que hizo el registro, se va a relacionar con la clave que se ortorga ",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="registros_de_horas",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Registro De Horario",
                "verbose_name_plural": "Registros De Horarios",
                "db_table": "registros_de_horas",
                "ordering": ["pk"],
                "permissions": [
                    ["autorizar_registrohora", "Puede Autorizar Registros De Horarios"],
                    [
                        "viewcrud_registrohora",
                        "Puede Visualizar Registros De Horarios en el menú",
                    ],
                ],
            },
        ),
        migrations.CreateModel(
            name="SolicitudJustificante",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "estado_solicitud",
                    models.CharField(
                        choices=[
                            ("A", "Aprobada"),
                            ("R", "Rechazada"),
                            ("P", "Pendiente"),
                        ],
                        default="P",
                        max_length=1,
                    ),
                ),
                (
                    "motivo",
                    models.CharField(
                        blank=True,
                        help_text="Motivo por la cual se va a justificar",
                        max_length=150,
                        null=True,
                    ),
                ),
                (
                    "dia_justificar",
                    models.DateField(
                        blank=True, help_text="Dia que quiere justificar", null=True
                    ),
                ),
                (
                    "clave_empleado",
                    models.IntegerField(
                        blank=True,
                        help_text="Clave del empleado que quiere justificar",
                        null=True,
                    ),
                ),
                ("evidencia_pdf", models.FileField(upload_to="documentos_pdfs/")),
                (
                    "usuario_que_registra",
                    models.ForeignKey(
                        blank=True,
                        help_text="Relacion al empleaod que hizo el justificante, se va a relacionar con la clave que se ortorga ",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="solicitudes_justificantes",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Solicitud de justificante",
                "verbose_name_plural": "Solicitudes de justificantes",
                "db_table": "solicitudes_justificantes",
                "ordering": ["pk"],
                "permissions": [
                    [
                        "autorizar_solicitudjustificane",
                        "Puede Autorizar Solicitudes de justificantes",
                    ],
                    [
                        "viewcrud_solicitudjustificane",
                        "Puede Visualizar Solicitudes de justificantes en el menú",
                    ],
                ],
            },
        ),
    ]
